Introduction to Kubernetes (K8S)
=> Kubernetes is an open-source platform that manages Docker containers in the form of a cluster. Along with the automated deployment and scaling of containers, it provides healing by automatically restarting failed containers and rescheduling them when their hosts die. This capability improves the application’s availability

~Kubernetes was originally created by Google. 
~Kubernetes was officially launched on June 7,2014.
That time they announce it was open-sourced  by google.
~The first stable version, kubernetes 1.0 ,was relesed on July 21,2015.

What is Kubernetes (k8s)?
=> Kubernetes is an orchestration tool/container management tool , via which container can be managed , horinzantal auto scaled , route based path pathing ,loadbalancing , deployment doman base pathing, and many other container relates automation & orchestration can be performed by k8s
OR
Kubernetes is an open-source Container Management tool that automates container deployment, container scaling, descaling, and container load balancing (also called a container orchestration tool). It is written in Golang and has a vast community because it was first developed by Google and later donated to CNCF (Cloud Native Computing Foundation). Kubernetes can group ‘n’ number of containers into one logical unit for managing and deploying them easily. It works brilliantly with all cloud vendors i.e. public, hybrid, and on-premises. 

Why use kubernetes ?
=> kubernetes is used for autoscaling , bin packing , cost management , microservice deployment , roll back, rolling out new deployment , self healing , load balancing , hpa , secrets management , automation in deployment , microservice deployment its the ideal tool combination for microservice deployment 

What are kubernetes objects ?
=> Objects the resources of your kubernets orchestration tool 
Types of object are : 
1. pods
2. services - nord port , cluster 
3. namespace 
4. replica set 
5. replica controller 
6. daemon set 
7. horizantal pod autoscaling
8. statefull set
9. ingress & ingress controller
10. deployment
11. presistent volume & presistent volume controller 
12. config map & config secrets 
    Rbac
    Helm chart 

What are Cluster ?
=> Cluster is a infra or imaginary infra term in which you have minimum two nodes , one is master node/control plan & another is worker node/slave nord 
~Master node/control plane : The kubernetes control plan manages clusters and resources such as worker node pods.
The control plane recive information such as cluster activity enternal & external request and more 
~Worker node/slave nord : In the kubernates a worker node's is a machine that manage user defined container and process data in cluster 

What is the pods ?
=> A pod in kubernetes is a group of one or more container that are the smallest unit of deployment and execation in kubernates application Pod share storage, networking and other resource.
Type of pods 
1.Intra pod 
2.Inter pod 

What is manifest files ?
=> In kubernetes manifest files are nothing but configuration files are in kubernetes that defines the desire state of resources. Manifest files written in jason and YAML formate 

What is minikube ?
=> Minikube is light weight kubernate implementation that creates a vm on local machine and deploys a sample cluster containing only node .

What is services ?
=>Its a k8s object , its important job is to expose your pod / microservice webapp deployed in pods outside the cluster , or keep it secure with in the cluster or provide a singular static endpoint or provide loadbalancing feature these are features of service
- SERVICE HAVE THREE TYPES :
1. Cluster IP : static IP gives 
2. Nodeport : gives port 30,000 32,767
3. Loadbalancing 
-In Kubernetes, a Service is a method for exposing a network application that is running as one or more Pods in your cluster.

What is Cluster IP ?
=> It provide static IP and static endpoint to your pods , you cannot expose your microservice for the people of internet it is only accessible withing the cluster 

What is Nodeport?
=> Port range 30,000 and 32,767 nodeport is used to expose your container webapp microservice pod's port to the node's port

What is Loadbalancer?
=> Is to provide a a singular endpoint to your nodeport , equally distribute traffic to your nodeport , be a singular endpoint which can be mapped with dns or domain

What is Selector ?
=> It basically selects/picks the metadata attached to your pods or another objects
-you can alos say it filtures out the mentioned data and selects only the mentioned attached object 
/COMMANDS - kubectl apply -f .
kubectl get pods 
kubectl get svc 
curl localhost:IP
kubectl describe pods 
kubectl exec -i -t < > --container < > --/bin/bash
kubectl delete -f .

What is Namespace ?
=> Its an object of k8s , Namespace bassically works as a segregation , pratition agent / object of your cluster 
-i.e it divides your cluster , it helps you in segregation and mantaining proper order in cluster 
/COMMAND kubectl get namespace or kubectl get ns 
kubectl get-n namespace svc 

What is Replica Set and Raolica Controller 
==>
$ Replica set -
Its an k8s object . which will create raplica or replications of pod with the help of pods configuration stored in template  
-While replica set works with based selector {} and lable based selector 

THREE TYPES OF SUBSELECTORS (OPERATORS)-
1. IN -
app: webapp --> in (app: webapp , app: qrapp , app: mobileapp) What ever value matches in set based selector the selector selects that value and creates pod's replication .

2. NOTIN -
app: ecommerceapp --> in (app: webapp , app: qrapp , app: mobileapp) In this selector whatever lables/values are kept, these value are totally ignored by the selector , and selector selects the value which is not present in your set  
3. EXITS -
app: webapp --> in (app: webapp) In whatever value present in exist based selector it will pick it and create pods replica 


$Replica Controller -
Its an k8s object which is capable in creating replication of pods but it work only within equallity based selector 


What is Daemonset ?
==> A DaemonSet in Kubernetes is a type of workload that ensures that a copy of a specific pod runs on all (or a subset of) nodes in a cluster. This is particularly useful for tasks like logging, monitoring, or other node-specific operations where you want a pod to run on every node.


What is Deployment ?
==> A Deployment in Kubernetes is a controller that manages a set of replica Pods. It provides declarative updates for Pods and ReplicaSets, ensuring that the desired state of the application matches the actual state in the cluster. This allows for easy scaling, rolling updates, and rollbacks.

What is Statefulset ?
==> A StatefulSet in Kubernetes is a specialized controller designed for managing stateful applications. Unlike Deployments, which are suited for stateless applications, StatefulSets provide guarantees about the ordering and uniqueness of Pods. This makes them ideal for applications that require stable identities, persistent storage, and ordered deployment.

What is Horizantol pod autoscaling (HPA) ?
==> Horizontal Pod Autoscaler (HPA) in Kubernetes is a feature that automatically adjusts the number of pod replicas in a Deployment, StatefulSet, or ReplicaSet based on observed CPU utilization, memory usage, or custom metrics. This allows your applications to scale dynamically in response to load, ensuring efficient resource use.

What is Persistent volume & Persistent volume Controller (PV&PVC)
==> In Kubernetes, Persistent Volumes (PVs) and Persistent Volume Claims (PVCs) are key concepts for managing storage that is independent of the lifecycle of Pods. They allow applications to use storage resources effectively while decoupling the storage management from the application.

Key Concepts
Persistent Volume (PV)
A Persistent Volume is a piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using a StorageClass.
PVs are independent of any individual Pod and persist beyond the lifecycle of the Pod that uses them.
They are managed by Kubernetes and can represent various types of storage backends, such as NFS, iSCSI, cloud storage (like AWS EBS, Google Persistent Disk), etc.

Persistent Volume Claim (PVC)
A Persistent Volume Claim is a request for storage by a user.
PVCs allow users to request specific amounts of storage and specify access modes (e.g., ReadWriteOnce, ReadOnlyMany).
Kubernetes will match a PVC with an available PV based on the requested size and access modes.

What is Ingress & Ingress Controller ?
==> In Kubernetes, Ingress and Ingress Controllers are used to manage external access to services within a cluster. They facilitate routing and load balancing of HTTP/S traffic to various services based on defined rules.

Key Concepts
Ingress
Ingress is a Kubernetes resource that defines rules for accessing services from outside the cluster.
It allows you to configure the routing of external HTTP/S traffic to the appropriate services based on the requested URL path or host.
Ingress can manage SSL termination, HTTP to HTTPS redirection, and other traffic management features.

Ingress Controller
An Ingress Controller is a component that watches for changes to the Ingress resource and applies the defined routing rules.
It is responsible for fulfilling the Ingress rules by configuring a load balancer, reverse proxy, or another routing mechanism.
Popular Ingress Controllers include NGINX, Traefik, HAProxy, and cloud provider-specific controllers (e.g., AWS ALB Ingress Controller). 